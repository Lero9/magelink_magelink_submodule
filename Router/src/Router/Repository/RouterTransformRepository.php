<?php
/**
 * @package Router\Repository
 * @author Sean Yao
 * @author Andreas Gerhards <andreas@lero9.co.nz>
 * @copyright Copyright (c) 2014 LERO9 Ltd.
 * @license http://opensource.org/licenses/BSD-3-Clause BSD-3-Clause - Please view LICENSE.md for more information
 */

namespace Router\Repository;

use Magelink\Exception\MagelinkException;
use Doctrine\ORM\EntityRepository;

/**
 * RouterTransformRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RouterTransformRepository extends EntityRepository
{

    /**
     * @param int $entity_type
     * @param string $possible_attribute_ids
     * @param int $type
     * @return array $applicableTransforms
     * @throws MagelinkException
     */
    public function getApplicableTransforms($entity_type, $possible_attribute_ids, $type)
    {
        $dql = "SELECT rt FROM \Router\Entity\RouterTransform rt"
            ." WHERE rt.entityTypeId = :entity_type_id AND rt.srcAttribute IN (:att_ids)";

        switch($type){
            case \Entity\Update::TYPE_CREATE:
                $dql .= ' AND rt.enableCreate = 1';
                break;
            case \Entity\Update::TYPE_UPDATE:
                $dql .= ' AND rt.enableUpdate = 1';
                break;
            case \Entity\Update::TYPE_DELETE:
                $dql .= ' AND rt.enableDelete = 1';
                break;
            default:
                throw new MagelinkException('Invalid update type: ' . $type);
        }

        return $this->getEntityManager()
            ->createQuery($dql)
            ->setParameter(':entity_type_id', $entity_type)
            ->setParameter(':att_ids', $possible_attribute_ids)
            ->getResult();
    }

}
